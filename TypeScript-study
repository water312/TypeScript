# TypeScript
TypeScript-study
void는 아무것도 반환하지 않는다

const strArr: string[] = ['str', 'str1', 'str2']

const strArr2: Array<string> = ['str', 'str1', 'str2']

const numArr: Array<number> = [1,2,3,4]

const boolArr: boolean[] = [true,false]

let은 재할당 가능해서 string으로 표시됨 let hi = 'hi'에서 let = string라고 나옴
const는 재할당 불가라서 const hi = 'hi'에서 const = hi라고 나옴

Tuple type
- 길이 고정 & 인덱스 타입이 고정
- 여러 다른 타입으로 이루어진 배열을 안전하게 관리
- 배열 타입의 길이 조절
const arr: string[] = ['A','B','C']

const tuple: [number,string] = [1, 'A']

const tuple1: (string | number)[] = [1, 'A']

const tuper2: [number, ...string[]] = [0, 'A', 'B']

undefined & null

최대한 사용하지 않는게 좋다

JavaScript에서와 마찬가지로 고유의 특별한 타입으로 인정한다.
이외에 void, never와 같이 더 세밀한 타입도 제공

const nu: null = null;

const un: undefined = undefined;

any type
무적이다
모든 값(타입)의 집합
사용하지 말자
noImplicitAny or strict 옵션 true 권장

unknown

새로운 최상위 타입
any처럼 모든 값을 허용하지만 상대적으로 엄격하다
TS에서 unknown으로 추론하는 경우는 없으니 개발자가 직접 명시해야함
assertion 혹은 타입 가드와 함께 사용한다
타입가드란 이타입이 맞는지 검증하는게 타입가드 이다 if (typeof num === 'string)

function func(x: unknown) {
    let val: any = x;
    let val1: unknown = x;
    let val2: string = x;
    let val3: boolean = x;
    let val4: number = x;
    let val5: string[] = x;
}

클래스
- JavaScript에서는 ES2015의 새로운 문법
- TypeScript에서의 클래스 기능은 C#에서 유래된 것이 많다
- 일부 기능은 TS에서만 존재하는 고유 문법으로 컴파일 후에 사라진다

class Person {
    // 필드
    // - 일종의 속성
    // - public으로 사용가능하다
    name: string;
    age: number;
    readonly location: string = 'Korea';
}
// 인스턴스
// - 클래스에서 파생된 고유한 것
// - 실제로 생성된 후 메모리에 올라감
const p = new Person();

    //생성자
    // - 초기화를 담당
    // - 클래스가 인스턴스화 될 때 초기화를 담당하는 소중한친구
    constructor(name: string, age: number) {
        this.name = name
        this.age = age
    }


    //메서드
    // 객체(클래스)에서는 행동을 뜻한다
    information(): string {
        return `${this.name}의 나이는 ${this.age}이다 `
    }

getter & setter

필드에 접근할 권한을 가진 제어자
getter O / setter X => 속성은 자동으로 읽기 전용
setter 매개변수의 타입 X / getter의 반환 타입에서 추론
private 속성은 .연산자로 접근할 수 없다 그래서 getter setter를 사용한다

class Person {
    name: string;
    //private 숨겨진 속성은 _를 사용함
    private _age: number;

    constructor(name: string, age: number) {
        this.name = name
        this._age = age
    }
    get age() {
        if (this._age === 0){
            return '나이가 설정되지 않았습니다'
        }
        return `나이는 ${this._age}세로 추정됩니다 `
    }

    set age(age) {
        if (typeof age === 'number'){
            this._age = age
        }
        this._age = 0;
    }
}

const p = new Person('jang', 0);

console.log(p.age)

extends
상속
확장
class 기본 {
    result() {
        return 'base'
    }
}

class 파생 extends 기본 {

}

const de = new 파생()

console.log(de.result())

super
기본 클래스 호출시 사용
생성자에서 this 사용 전 호출 되어야함
class Animal {
    name: string

    constructor(name:string) {
        this.name = name
    }

    sayName() {
        return `동뭉의 이름은 ${this.name}`
    }
}


class Person extends Animal {
    constructor(name : string) {
        super(name)
    }

    sayName() {
        return `${super.sayName()} 사람의 이름은 ${this.name}`
    }
}

const person = new Person('jang')

console.log(person.sayName())

접근제어자
속성과 메서드에 접근을 제한할 수 있다
클래스 내부 구현 정보를 적당히 공개하여 일부분만 노출시킨다
API와 비슷한 흉내를 낼 수 있다
타입 시스템을 이용해 규칙을 강제할 수 있다
public 어디서나 접근 가능 (기본값)
protected 해당 클래스와 서브클래스에서만 접근 가능
private 해당 클래스의 인스턴스에서만 접근 가능

static
클래스의 속성과 메서드를 new로 인스턴스화 하지 않고 호출할 수 있다
접근 제어자를 활용할 수 있다
몇가지 정적 이름을 사용할 수 없다
- 클래스는 그 자체로 new로 호출할 수 있는 함수이기 때문
- ex)function.name 내부적으로 bulit in 구성 이미 생성되어있는 것

readonly
자바스크립트에는 없음
타입스크립트에서만 있음
이걸로 안전한 속성을 만들 수 있다

추상 클래스
abstract를 선언한 클래스로 직접 인스턴스화 될 수 없는 클래스이다
직접 인스턴스화 될 수 없지만 extends후 파생된 클래스를 인스턴스화하도록 유도한다
추상 클래스는 구현된 메서드를 포함시킬 수 있다
abstract선언한 메서드는 파생된 클래스에서 메서드를 구현해야한다
설계에 목적을 명확하게 가지는 클래스이다
abstract class Animal {
    //선언된 메서드
    abstract hello(): string
    //구현된 메서드
    run() {
        return this.hello() + 'run'
    }
}

// 직접 인스턴스가 될 수 없다
// const animal = new Animal()

class Person extends Animal {
    hello() {
        return 'hi'
    }
}

const person = new Person()
console.log(person.run())

Parameter Properties
class Person {
    constructor(
        public name: string,
        private age : number,
        protected gender: 'M' | 'f'
    ) {
        
    }
}

메서드 오버라이딩
class Animal {
    run() {
        return 'Animal이 달리다'
    }
}

class Dog extends Animal {
    run() {
        return 'Dog이 달리다'
    }
}

class Person extends Animal {
run() {
        return 'Person이 달리다'
    }
}

const p = new Person()
const d = new Dog()
console.log(p.run(),d.run())

인터페이스
jsp에서는 존재하지 않는다
객체의 타입을 정의하고 생김새를 가지도록 할 수 있다
TypeScript에서의 클래스 기능은 C#에서 유래도니 것이 많다
일부 기능은 TS에서만 존재하는 고유 문법으로 컴파일 후에 사라진다
extends가 아닌 implements 키워드로 구현한다
interface
-정의
-설계
implements
- interface의 설계를 구현한다

interface Person {
    name: string
    age: number
}

const jang: Person = {
    name: 'hi',
    age: 9
}

typeof
jsp에서 이미 존재하는 타입 검사 연산자

function print(value: number | string): string{
    if(typeof value === 'number'){
        return String(value)
    }
    if(typeof value === 'string'){
        return value
    }
    return value
}

instanceof
jsp에서 이미 존재
instanceof 연산자는 생성자의 prototype 속성이 객체의 프로토타입 체인 어딘가 존재하는지 판별
function getDate(date: Date | string): Date{
    if(date instanceof Date){
        return date
    }

    return new Date(date)
}

열거형소개 (Enum)
의미있는 상수 자료를 정의할수있다(문서화)
키를 값에 할당하며 순서가 없는 집합이자 자료구조이다
enum 키워드 + PascalCase 조합으로 생성
계산된 값을 사용할수있다
enum Prize{
    Gold = 100,
    Silver,
    Bronze
}

숫자 열거형 (Enum)
1씩 증가한다 내가 설정 못함

문자형 열거
각 멤버의 값을 문자열로 초기화되어야 한다
숫자형 열거와 동작방식이 다르다
-값이 자동으로 증가하지 않는다
-이외에 리버스 매핑의 차이점도 존재

Heterogeneous 열거형 (혼합)
최대한 사용 하지않는것으로 한다

리버스 매핑
숫자형 열거 같은 경우 키의 값을 역으로 매핑할 수 있다
문자형 열거는 지원되지 않음
enum Order {
    First = 1,
    Second = 2,
    Third = 3
}

const firstVal = Order.First // 1
const keyOfFirstVal = Order[firstVal] // first

const 열거
기본적으로 열거형은 불안전한 접근을 허용한다
- const enum은 이러한 점을 보완하기 위한 안전한 열거형
enum 앞에 const 키워드를 명시한다
컴파일 후 제거되기 때문에 jsp코드를 생성하지 않는다

열거형 활용
런타임에 존재하는 실제 객체
keyof, keyof typeof와 조합하여 활용할 수 있다
const enum Language {
    TypeScirpt = 'TS',
    JavaScript = 'JS',
    Java = 'JAVA',
    Ruby = 'RB',
}

const Language2 = {
    TypeScirpt : 'TS',
    JavaScript : 'JS',
    Java : 'JAVA',
    Ruby : 'RB',
} as const


// type Lang = 'TS' | 'JS'
// type LangCode = keyof typeof Language

// function getLang(langCode: LangCode){
//     console.log(langCode)
// }

// getLang('TypeScirpt')


타입 별칭 소개
의미없는 반복을 줄이고 타입을 명시적으로 사용하도록 돕는다
let const 를 선언해 변수를 초기화 하듯이 사용할 수 있다
컴파일러가 따로 추론하지는 않는다
type str = string
type num = number
type arr = num[]
type func = () => void
type Person = {
    name: str
    age: num
    counts: arr
    getInfo: func
}

interface personInterface{
    name: str
    age: num
    counts: arr
}

Union 타입 (합집합)
둘을 합친 결과
type StringOrNumber = string | number
| 이게 유니온타입

Intersection 타입 (교집합)
const obj: Person & Me = {
    name:'jang'
    age: 9
}
&이게 인터섹션타입

typescript 설정
tsc --init 이폴더를 기준으로 타입스크립트 환경을 초기화한다

Jsdoc??
일반적인 주석들을 활용해서 바로 일종의 문서화를 해주는 기능이다

제네릭소개
C# 및 Java와 같은 언어에서 널리 사용되는 문법
대규모 소프트웨어를 구축할 수 있는 가장 유연한 기능을 제공
<T>와 같은 꺽쇠 괄호를 사용한다
어렵다

function getInfo<타입 변수 지정>(msg: 타입 인자) : 타입 반환 {
	return msg
}
//제네릭

function getInfo<T>(msg: T): T {
    return msg
}

console.log(getInfo<string>('Word'));
console.log(getInfo<number>(123));
console.log(getInfo<string[]>(['Word','T']));
console.log(getInfo<number[]>([1,2,3,4]));

// 함수에서의 제네릭

type TypeGetInfoFunc = <T>(msg:T) => T
interface InterfaceGetInfoFunc {
    <T>(msg: T): T;
}

function getInfo<T>(msg:T):T {
    return msg
}

const TypeAliases:TypeGetInfoFunc = getInfo
const TypeInterface:InterfaceGetInfoFunc = getInfo

function getInfoMultiple<T1,T2>(msg: [T1,T2]): [T1,T2] {
    return msg
}

getInfoMultiple<string, number>(['Str',123])

//클래스에서의 제네릭

class Animal<T, U> {
    name: T
    genderType : U
    constructor(name: T, genterType: U) {
        this.name = name
        this.genderType = genterType
    }
}

type GenderType = 'M' | 'F'
const dog = new Animal<string,GenderType>('강아지', 'M')
const cat = new Animal('고양이', 'F')

// 제네릭 타입 좁히기 (extends)

function printMessage<T extends string | number> (msg: T) {
    return msg
}

function printArr<T extends string[] | number[]> (msg: T) {
    return msg.toString()
}

printMessage('Hello')
printMessage(123)
// Error
// printMessage<string[]>(['H','E','L','L','O'])

printArr(['H','E','L','L','O'])
printArr([1,2,3,4])

//Error
//printArr<boolean[]>([true,false])

/**
 * Index 타입 다루기
 * Index에 접근하는 모든것들은 타입스크립트에선 쉽지않다
 */

interface Todo {
    id: number
    content: string
}

//Indexed Access Type
type TodoId = Todo['id']

interface StrInterface {
    [index: number]: string
    name: string
    age: number
    // [index: string]: number
}

const Person: StrInterface = {
    99: '구구',
    name: 'cho',
    age: 99,
    // genderType: 'M'
}

/**
 * 조건부 타입 다루기
 * 
 * SomeType extends OtherType ? TrueType : FalseType;
 * 특이하기때문에 어떻게 활용할 수 있을까 떠오르지 않을수 있다
 */

interface Person {
    name: string
}

interface Me extends Person {
    age: number
}

type Ex1 = Me extends Person ? string : number

class Galaxy {
    type = 'AOS'
}
class IPhone {
    type = 'IOS'
}

type MyDevice<T> = T extends 'IPhone' ? IPhone : Galaxy

let myPhone: MyDevice<'Galaxy'>
let myPhone2: MyDevice<'IPhone'>
let myPhone3: MyDevice<'Xiaomi'>

type IsNumberType = 123 extends number ? true : false
type IsNumberType2 = number extends 123 ? true : false

const isNumberType: IsNumberType = true
const isNumberType2: IsNumberType2 = false

/**
 * (Mapped) 맵드 타입 다루기
 * 
 * 기존 타입에서 새로운 다른 타입에서 타입을 정의할 수 있다.
 * 액세스 서명이나 조건부 타입과 함께 사용할 수 있다.
 * 
 * { T in V: T } 이렇게 자주 쓰임
 * 
 * 새로운 타입을 새롭게 만들어낼수있다
 * 이미있는 타입을 새롭게 만들어낼수있다
 * 새롭게 생각하기
 * 
 * 유틸리티타입을 직접 만들때 직접 사용을 하면 깊이 이해할수 있을 것이다
 * 
 */

const newNum = [1,2,3].map((num) => num ** 2)

type StringOrNumber = {
    [key: string]: string | number
}

const MixedType: StringOrNumber = {
    one: 'boolean',
}

type Person = {
    name: string
    age: number
    gender: string
}

type Dict<T> = {
    [key: string]: T
}

const newPerson: Dict<Person> = {}
newPerson.me

type NewRecord = {
    [key in 'you' | 'we' | 'me']: Person
}

function printNewPerson(newPerson: NewRecord) {
    newPerson.we
    newPerson.you
    newPerson.me
}
선언 병합
- TypeScript에서 특이한 개념
- 컴파일러가 동일한 이름으로 선언된 두개의 각기 다른 선언을 하나의 정의로 병합하는 것
- 단 원래의 기능이 모두 포함되며 여러 선언을 병합할 수 있다
- TypeScript에서 선언은 네임스페이스, 타입 또는 값의 세 그룹 중 적어도 하나에 엔티티를 만든다
- 네임스페이스는 점으로 구분된 표기법을 사용하여 액세스하는 이름을 포함하는 영역을 생성

/**
 * 선언 병합
 */

interface Cat {
    name: string
}

interface Cat {
    age: number
}

const animal: Cat = {
    name: 'cat',
    age: 99
}

interface Person {
    name: string
    age: number
}

const Person = {
    name: 'Cho',
    age: 99
}

//interface Person도 잡히고 const Person도 잡힌다
export {
    Person
}

class Car {
    static createCar(): Car {
        return {
            name: 'Car'
        }
    }
}

namespace Car {
    function createCar(): Car{
        return Car.createCar()
    }
}

interface Car {
    name: string
    brandType?: string
}

//class namespace interface 전부다 잡힌다. 너무 겹친다 스택쌓이듯이 사용하기 어렵다
//어떻게 스코프를 나눌까??
//최대한 헷갈리지 않도록 만들고 타입을 정의하는것이 중요하다고 생각한다
//선언병합을 겪게 된다면 어떤 기준으로 선언이 병합되고 그것을 방지하기 위해 어떻게 나눌지 고민해서 하자
export {
    Car
}

타입 추론
- 명시적으로 타이핑을 하지 않았을때 TS가 알아서 그 코드의 타입을 해석해 나가는 방식
- 예를 들어 const => 리터럴 타입으로 추론
	   let => 기본 타입으로 추론
일반적인 타입 추론
- 여러 식에서 타입을 유추해 가장 일반적인 타입을 계산
- 각 후보 타입을 고려하고 다른 모든 후보 타입과 호환되는 타입을 선택하는 알고리즘

문맥상 타이핑
- 타입 추론은 오히려 '반대로'동작하는 경우가 있다
- 이것을 'Contextual Typing'이라고 부른다
- 문맥상 타입 지정은 표현식 타입이 위치에 의해 암시적인 경우에 발생한다

타입 단언
- TypeScript가 알 수 없는 타입에 대한 정보가 있을 때
- 타입 단언을 사용하여 보다 구체적인 타입을 지정할 수 있다
- 하지만 컴파일 타임에 제거되기 때문에 관련된 런타임 검사가 없다.
- 즉 타입 단언이 잘못된 경우 null이나 예외를 발생시키지 않음
- as 혹은 <>구문으로 사용 가능

/**
 * 타입 단언
 */
// 타입 단언은 조금이라도 줄일 수 있도록 하는것이 좋다
// 코드를 짤때 타입 단언을 쓰지않는 쪽으로 습관을 들이는것이 좋다

// const div: HTMLDivElement로 단언 할수 있다
const div = document.querySelector('div');
// 사용자 커스텀으로 하면 .ts가 THMLDivElement인지 알수가 없다.
const div2 = document.querySelector('.ts');
// 강제로 as HTMLDivElement를 먹이면 알수있다.
const div3 = document.querySelector('.ts') as HTMLDivElement;
// 이렇게 꺽쇠로도 사용할 수 있다
const div4 = <HTMLDivElement>document.querySelector('.ts');

const str = 'Hello' as unknown as number;

/**
 * never
 * 
 *  - 일부 함수의 반환이 없는 경우에 명시 => void
 *  - 예외를 던지거나 실행이 종료될때 => never
 *  void랑 헷갈릴수있지만 둘다 다른 결이다
 * 
 */

function someError(message: string): never {
    throw new Error(message)
}

function someFunc(param: string | number): never {
    if(typeof param === 'string'){
        
    } else if (typeof param === 'number'){

    } else {
        // somse never
        // 여기에 들어갈 never때문에 위에 반환 타입이 never이 된다
    }

}

// 유니언 타입에서 제거가 됨
type StrUnion = never | string
// 교차 타입에서는 덮어쓴다
type NeverInter = never & string

/**
 * keyof 타입 연산자
 * 
 * - 객체 타입의 키를 (문자열 or 숫자) 유니언 타입으로 생성
 * - 리터럴 집합으로 만들어진 유니언 타입을 만들때 유용
 * - 맵드 타입과 사용시에는 더욱 유연하게 활용 가능
 * 
 */

interface Size {
    width: number
    height: number
}

type S = keyof Size // 'width' | 'height'

function getSize(size: S){
    return size
}

getSize(1111) // false
getSize('width22') // false
getSize('width') // true
getSize('height') // true

const SizeType = {
    width: 'Px',
    heigth: 'Px'
} as const

// SizeType에 있는 Px를 가지고 올수있다
type SizeTypeValue = typeof SizeType[keyof typeof SizeType]

/**
 * Non-null Assertion Operator (Postfix !)
 * and
 * Optional chaining
 * 무조건 좋다고 할수는 없다
 * 가장어려운게 빈값을 처리하고 빈값을 있음을 검증하고
 * 이러한 과정에 타입가드를 넣고 처리함
 */

let nil = null;
let un = undefined;

function func():void {

}
function func2():undefined {
    return undefined
}
function func3():null {
    return null
}

console.log(func()) // undefined
console.log(func2()) // undefined
console.log(func3()) // null

interface Home {
    foods?: string[]
    books?: string[]
}

const MyHome: Home = {}

// Myhome.foods에서 오류가 남 foods에 undefined만 가능하다
// 해결방법 값이 있음을 TS에 개발자가 알린다
// 나의 코드가 동작되도록 신뢰해줘 라는 느낌 !?썻을때
MyHome.foods.push('banana') // false
MyHome.foods!.push('banana') // true

MyHome.books.push('Clean Code') // false
MyHome.books?.push('Clean Code') // true

/**
 * Type Aliases vs Interfaces
 * 
 * - 각자 다른 개념이지만 비슷한 점도 많고 다른 점도 있어 알아둘 것이 많다
 * - 둘다 많이 사용되는 키워드
 * - 둘다 많이 사용되면서 또 비슷한 역할을 대체하는 경우도 있다
 * 
 * - 이미 이 내용에 정답이 있는 것은 아니지만, 팀 & 개인의 규칙이나 선호도에 따라 다른 방식으로 사용될 수 있다
 * - 비교표 수시로 찾아서 확인해보자
 * - 항상 최신 자료를 확인해야한다 (필수)
 */

interface IAnimal {
    name: string
}

interface IBear extends IAnimal {
    honey: boolean
}

type TAnimal = {
    name: string
}

// interface는 Type Aliases를 확장할 수 있다
interface IBear2 extends TAnimal {
    honey: boolean
}

// Type Aliases는 extends 키워드가 먹히지 않는다
// type TBear extends IAnimal {}
// type TBear extends TAnimal {}

type TBear = TAnimal & {
    honey: boolean
}

// 위의 중복선언 인터페이스와 선언 병합됨
interface IAnimal {
    age: number
}

// 중복 선언이 되면 선언병합이 되기 때문에 합쳐져서 name 과 age를 써야한다
const AnimalImpl: IAnimal = {
    name: 'AnimalImpl',
    age: 99
}

// 중복 선언이 불가능하다 (선언 병합 지원 X)
type TAnimal = {
    age: number
}

class Dog implements IAnimal {
    name = 'Dog'
    age = 99
}

class Dog2 implements TAnimal {
    name = "Dog"
    age = 99
}

type CatType = 'City' | 'Forest' & {
    meow(): string
}
/**
 * 유틸리티 타입
 * - 전역으로 사용 가능한 편리한 타입 변환 도구
 * - 내장에 장착된 타입을 이해하고 사용하면 생산성이 굉장히 증가한다
 * - 이해하기 위해 직접 만들고 직접 사용하면 이해도도 높아진다
 */

interface Person {
    name: string
    age: number
}
const arr = []
// arr. 여러가지 타입들이 나온다
const str = ''
// str. 여라가지 타입들이 나온다
type T = Partial<Person>
type T2 = Required<Person>

/**
 * 유틸리티 타입 활용하기
 * Partial이란
 * Partial은 기본적으로 제공되는 워드속성을 선택적으로 만들어 버린다
 */

interface Person {
    name: string
    age: number
}

type PersonOpt = Partial<Person>

// 원래는 Person에 있는 name과 age를 둘다 무조건 써야한다
// 하지만 Partial은 선택적으로 가능하다
function getInfo(p: PersonOpt) {
    return p
}

getInfo({name: 'str'})

/**
 * 유틸리티 타입 활용하기
 * Required란?
 * Partial과 완전히 반대다
 * Required는 interface 안에있는 것을 다 쓰게만든다
 */

interface Animal {
    name: string
    type?: string
}

type AnimalRequired = Required<Animal>

function getInfo(p: AnimalRequired) {
    return p
}
getInfo({name: 'str', type: 'str1'})

/**
 * 유틸리티 타입 활용하기
 * Readonly란?
 * 읽기전용으로 만든다
 */

const animal: Readonly<Animal> = {
    name: 'Dog',
    type: '강아지'
}

animal.type = '고양이' // type에 오류가 남 왜냐면 Readonly속성이기 때문이다
/**
 * 유틸리티 타입 활용하기
 * Record란?
 */

// Record 왼쪽이 Key 오른쪽이 Value라고 생각하기 편함
// 주로 라우팅 path에 대한 예제로 쓰면 이해가 잘됨
const navPath: Record<Path, PathURL> = {
    home: {
        path: '/home'
    },
    order: {
        path: '/order'
    },
    cart: {
        path: '/cart'
    }
}

/**
 * 유틸리티 타입 활용하기
 * Omit이란?
 */

// Omit<type, keys> 불필요한 키를 드러낼때 주로 사용한다
interface Friends {
    name: string
    age: number
    tel: number
}
//나이만 제거 하고 싶을 때 
type BaseInfoFriends = Omit<Friends, 'age'>

/**
 * 유틸리티 타입 활용하기
 * Pick이란?
 */

// Pick<type, keys> 필요한 것만 가져오는것
interface Friends {
    name: string
    age: number
    tel: number
}
// name과 tel만 가져온다
type OnlyNamePerson = Pick<Friends, 'name' | 'tel'>

/**
 * 유틸리티 타입 활용하기
 * Exclude란?
 */

// Exclude<타입, 제외할 유니온 멤버>
// Omit과 헷갈릴수 있다
// 유니온을 위해 존재함
type Animal = 'Man' | 'Woman' | 'Cat' | 'Dog'

// 'Man' | 'Woman'만 남는다
type Person = Exclude<Animal, 'Cat' | 'Dog'>
// 'Cat' | 'Dog'만 남는다
type DogAndCat = Exclude<Animal, 'Man' | 'Woman'>

/**
 * 유틸리티 타입 활용하기
 * Extract란?
 */

// Extract<타입, 교집합 시킬 수 있는 유니온 멤버>
// 중복되는 3만 들어간다
type Example3 = Extract<'1' | '2' | '3', '3' | '4' | '5'> 

/**
 * 유틸리티 타입 활용하기
 * NonNullable이란?
 */

// NonNullable<타입>
// 결과 string number boolean
type Type1 = NonNullable<string | number | boolean | undefined>
// 결과 string boolean
type Type2 = NonNullable<string | null | boolean | undefined>
// 결과 string boolean 0
type Type3 = NonNullable<string | 0 | boolean | undefined>
// 결과 객체타입
type Type4 = NonNullable<{} | undefined>
// 결과 객체타입안에 있는것들은 건들지 않음
type Type5 = NonNullable<{
    name: string
    age: undefined
} | undefined>

/**
 * 유틸리티 타입 활용하기
 * Parameters란?
 */

// Parameters<타입>
// 함수의 매개변수에서 튜플타입을 생성해준다

// 결과 [n1: number, n2: number] 생성된다
type Tuple1 = Parameters<(n1: number, n2: number) => void>
// 결과 [param: unknown]
type Tuple2 = Parameters<<T>(param: T) => T>
// 결과 [param: any]
type Tuple3 = Parameters<(param: any) => void>
// 결과 unknown[]
type Tuple4 = Parameters<any>
// 결과 never
type Tuple5 = Parameters<never>
// 결과 안됨
type Tuple6 = Parameters<string>
// 결과 안됨
type Tuple7 = Parameters<number>
// 결과 unknown[]
type Tuple8 = Parameters<<T>(...args: T[]) => void>
// 이런걸 봤을때 최대한 안전하게 처리해준다
// 안전을 위해 존재하는 유틸리티타입이라고 생각하면 된다

/**
 * 유틸리티 타입 활용하기
 * ReturnType이란?
 */

// ReturnType<타입>
// 반환타입 그자체로 돌려준다
// 결과 Return1 = string
type Return1 = ReturnType<() => string>
// 결과 Return2 = void
type Return2 = ReturnType<() => void>
// 결과 Return3 = unknown
type Return3 = ReturnType<() => unknown>
// 결과 Return4 = null
type Return4 = ReturnType<() => null>
// 결과 Return5 = unknown
type Return5 = ReturnType<<T>(p: T) => T>

function func(s: string):string {
    return s
}
// 결과 Return6 = string
type Return6 = ReturnType<typeof func >

/**
 * 유틸리티 타입 활용하기
 * InstanceType이란?
 */

// InstanceType<타입>
// 말그대로 InstanceType을 뽑아준다

class BaseClass {

}

const P = new BaseClass()
// typeof를 넣어야함
type In = InstanceType<typeof BaseClass>


